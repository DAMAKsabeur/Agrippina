/*
 * (c) 1997-2016 Netflix, Inc.  All content herein is protected by
 * U.S. copyright and other applicable intellectual property laws and
 * may not be copied without the express permission of Netflix, Inc.,
 * which reserves all rights.  Reuse of any of this content for any
 * purpose without the permission of Netflix, Inc. is strictly
 * prohibited.
 */
 
std::string drmResultStr(DRM_RESULT drmResult)
{
#ifdef BUILD_DEBUG
    typedef std::map<DRM_RESULT, const std::string> MapType;
    static MapType resMap;
    if (resMap.empty())
    {
        // $ tail -n+160 source/results/drmresults.h | awk '/\#define\ DRM_E/ {print "std::make_pair(" substr($3, 14, 10) ", \"" $2 "\"),"}'
        const MapType::value_type mapData[] =
        {
            std::make_pair(0x80000002, "DRM_E_OUTOFMEMORY"),
            std::make_pair(0x80004001, "DRM_E_NOTIMPL"),
            std::make_pair(0x80004003, "DRM_E_POINTER"),
            std::make_pair(0x80004005, "DRM_E_FAIL"),
            std::make_pair(0x80070002, "DRM_E_WIN32_FILE_NOT_FOUND"),
            std::make_pair(0x80070006, "DRM_E_HANDLE"),
            std::make_pair(0x80070012, "DRM_E_WIN32_NO_MORE_FILES"),
            std::make_pair(0x80070057, "DRM_E_INVALIDARG"),
            std::make_pair(0x8007007A, "DRM_E_BUFFERTOOSMALL"),
            std::make_pair(0x80070103, "DRM_E_NOMORE"),
            std::make_pair(0x80070216, "DRM_E_ARITHMETIC_OVERFLOW"),
            std::make_pair(0x80070490, "DRM_E_NOT_FOUND"),
            std::make_pair(0x80070667, "DRM_E_INVALID_COMMAND_LINE"),
            std::make_pair(0x80030002, "DRM_E_FILENOTFOUND"),
            std::make_pair(0x8003006E, "DRM_E_FILEOPEN"),
            std::make_pair(0xC00D272F, "DRM_E_PARAMETERS_MISMATCHED"),
            std::make_pair(0xC00D2712, "DRM_E_FAILED_TO_STORE_LICENSE"),
            std::make_pair(0xC00D275F, "DRM_E_NOT_ALL_STORED"),
            std::make_pair(0x80040E80, "DRM_E_VERIFICATION_FAILURE"),
            std::make_pair(0x80040E82, "DRM_E_RSA_SIGNATURE_ERROR"),
            std::make_pair(0x80040E86, "DRM_E_BAD_RSA_EXPONENT"),
            std::make_pair(0x80040E87, "DRM_E_P256_CONVERSION_FAILURE"),
            std::make_pair(0x80040E88, "DRM_E_P256_PKCRYPTO_FAILURE"),
            std::make_pair(0x80040E89, "DRM_E_P256_PLAINTEXT_MAPPING_FAILURE"),
            std::make_pair(0x80040E8A, "DRM_E_P256_INVALID_SIGNATURE"),
            std::make_pair(0x80040E8B, "DRM_E_P256_ECDSA_VERIFICATION_ERROR"),
            std::make_pair(0x80040E8C, "DRM_E_P256_ECDSA_SIGNING_ERROR"),
            std::make_pair(0x80040E8D, "DRM_E_P256_HMAC_KEYGEN_FAILURE"),
            std::make_pair(0x80041100, "DRM_E_CH_BASECODE"),
            std::make_pair(0x80041103, "DRM_E_CH_VERSION_MISSING"),
            std::make_pair(0x80041104, "DRM_E_CH_KID_MISSING"),
            std::make_pair(0x80041105, "DRM_E_CH_LAINFO_MISSING"),
            std::make_pair(0x80041106, "DRM_E_CH_CHECKSUM_MISSING"),
            std::make_pair(0x80041107, "DRM_E_CH_ATTR_MISSING"),
            std::make_pair(0x80041108, "DRM_E_CH_INVALID_HEADER"),
            std::make_pair(0x80041109, "DRM_E_CH_INVALID_CHECKSUM"),
            std::make_pair(0x8004110A, "DRM_E_CH_UNABLE_TO_VERIFY"),
            std::make_pair(0x8004110B, "DRM_E_CH_UNSUPPORTED_VERSION"),
            std::make_pair(0x8004110E, "DRM_E_CH_BAD_KEY"),
            std::make_pair(0x8004110F, "DRM_E_CH_INCOMPATIBLE_HEADER_TYPE"),
            std::make_pair(0x80041110, "DRM_E_HEADER_ALREADY_SET"),
            std::make_pair(0x80041111, "DRM_E_CH_MULTIPLE_KIDS"),
            std::make_pair(0x80041200, "DRM_E_LIC_BASECODE"),
            std::make_pair(0x80041203, "DRM_E_LIC_PARAM_NOT_OPTIONAL"),
            std::make_pair(0x80041205, "DRM_E_LIC_INVALID_LICENSE"),
            std::make_pair(0x80041207, "DRM_E_LIC_UNSUPPORTED_VALUE"),
            std::make_pair(0x80041400, "DRM_E_CPRMEXP_BASECODE"),
            std::make_pair(0x00041400, "DRM_E_CPRMEXP_NOERROR"),
            std::make_pair(0x80041403, "DRM_E_CPRMEXP_NO_OPERANDS_IN_EXPRESSION"),
            std::make_pair(0x80041404, "DRM_E_CPRMEXP_INVALID_TOKEN"),
            std::make_pair(0x80041405, "DRM_E_CPRMEXP_INVALID_CONSTANT"),
            std::make_pair(0x80041406, "DRM_E_CPRMEXP_INVALID_VARIABLE"),
            std::make_pair(0x80041407, "DRM_E_CPRMEXP_INVALID_FUNCTION"),
            std::make_pair(0x80041408, "DRM_E_CPRMEXP_INVALID_ARGUMENT"),
            std::make_pair(0x80041409, "DRM_E_CPRMEXP_INVALID_CONTEXT"),
            std::make_pair(0x8004140B, "DRM_E_CPRMEXP_MISSING_OPERAND"),
            std::make_pair(0x8004140C, "DRM_E_CPRMEXP_OVERFLOW"),
            std::make_pair(0x8004140D, "DRM_E_CPRMEXP_UNDERFLOW"),
            std::make_pair(0x8004140E, "DRM_E_CPRMEXP_INCORRECT_NUM_ARGS"),
            std::make_pair(0x8004140F, "DRM_E_CPRMEXP_VARIABLE_EXPECTED"),
            std::make_pair(0x80041410, "DRM_E_CPRMEXP_RETRIEVAL_FAILURE"),
            std::make_pair(0x80041411, "DRM_E_CPRMEXP_UPDATE_FAILURE"),
            std::make_pair(0x80041412, "DRM_E_CPRMEXP_STRING_UNTERMINATED"),
            std::make_pair(0x80041413, "DRM_E_CPRMEXP_UPDATE_UNSUPPORTED"),
            std::make_pair(0x80041414, "DRM_E_CPRMEXP_ISOLATED_OPERAND_OR_OPERATOR"),
            std::make_pair(0x80041415, "DRM_E_CPRMEXP_UNMATCHED"),
            std::make_pair(0x80041416, "DRM_E_CPRMEXP_WRONG_TYPE_OPERAND"),
            std::make_pair(0x80041417, "DRM_E_CPRMEXP_TOO_MANY_OPERANDS"),
            std::make_pair(0x80041418, "DRM_E_CPRMEXP_UNKNOWN_PARSE_ERROR"),
            std::make_pair(0x80041419, "DRM_E_CPRMEXP_UNSUPPORTED_FUNCTION"),
            std::make_pair(0x8004141A, "DRM_E_CPRMEXP_CLOCK_REQUIRED"),
            std::make_pair(0x80048000, "DRM_E_LEGACY_BASECODE"),
            std::make_pair(0x80048007, "DRM_E_LIC_KEY_DECODE_FAILURE"),
            std::make_pair(0x80048008, "DRM_E_LIC_SIGNATURE_FAILURE"),
            std::make_pair(0x80048014, "DRM_E_KEY_MISMATCH"),
            std::make_pair(0x800480CF, "DRM_E_INVALID_SIGNATURE"),
            std::make_pair(0x800480D2, "DRM_E_CIPHER_NOT_INITIALIZED"),
            std::make_pair(0x800480D3, "DRM_E_DECRYPT_NOT_INITIALIZED"),
            std::make_pair(0x800480D4, "DRM_E_SECURESTORE_LOCK_NOT_OBTAINED"),
            std::make_pair(0x800480D5, "DRM_E_PKCRYPTO_FAILURE"),
            std::make_pair(0x800480D6, "DRM_E_INVALID_DST_SLOT_SIZE"),
            std::make_pair(0x80049005, "DRM_E_UNSUPPORTED_VERSION"),
            std::make_pair(0x80049006, "DRM_E_EXPIRED_CERT"),
            std::make_pair(0x80049007, "DRM_E_DRMUTIL_INVALID_CERT"),
            std::make_pair(0x8004A000, "DRM_E_DEVICE_NOT_REGISTERED"),
            std::make_pair(0x8004A001, "DRM_E_TOO_MANY_INCLUSION_GUIDS"),
            std::make_pair(0x8004A002, "DRM_E_REVOCATION_GUID_NOT_RECOGNIZED"),
            std::make_pair(0x8004A003, "DRM_E_LIC_CHAIN_TOO_DEEP"),
            std::make_pair(0x8004A004, "DRM_E_DEVICE_SECURITY_LEVEL_TOO_LOW"),
            std::make_pair(0x8004A005, "DRM_E_DST_BLOCK_CACHE_CORRUPT"),
            std::make_pair(0x8004A007, "DRM_E_DST_BLOCK_CACHE_MISS"),
            std::make_pair(0x8004A013, "DRM_E_INVALID_METERRESPONSE_SIGNATURE"),
            std::make_pair(0x8004A014, "DRM_E_INVALID_LICENSE_REVOCATION_LIST_SIGNATURE"),
            std::make_pair(0x8004A015, "DRM_E_INVALID_METERCERT_SIGNATURE"),
            std::make_pair(0x8004A016, "DRM_E_METERSTORE_DATA_NOT_FOUND"),
            std::make_pair(0x8004A018, "DRM_E_INVALID_REVOCATION_LIST"),
            std::make_pair(0x8004A019, "DRM_E_ENVELOPE_CORRUPT"),
            std::make_pair(0x8004A01A, "DRM_E_ENVELOPE_FILE_NOT_COMPATIBLE"),
            std::make_pair(0x8004A01B, "DRM_E_EXTENDED_RESTRICTION_NOT_UNDERSTOOD"),
            std::make_pair(0x8004A01C, "DRM_E_INVALID_SLK"),
            std::make_pair(0x8004A01D, "DRM_E_DEVCERT_MODEL_MISMATCH"),
            std::make_pair(0x8004A01E, "DRM_E_OUTDATED_REVOCATION_LIST"),
            std::make_pair(0x8004C001, "DRM_E_DEVICE_NOT_INITIALIZED"),
            std::make_pair(0x8004C002, "DRM_E_DRM_NOT_INITIALIZED"),
            std::make_pair(0x8004C003, "DRM_E_INVALID_RIGHT"),
            std::make_pair(0x8004C006, "DRM_E_INVALID_LICENSE"),
            std::make_pair(0x8004C008, "DRM_E_CONDITION_NOT_SUPPORTED"),
            std::make_pair(0x8004C009, "DRM_E_LICENSE_EXPIRED"),
            std::make_pair(0x8004C00B, "DRM_E_RIGHTS_NOT_AVAILABLE"),
            std::make_pair(0x8004C00C, "DRM_E_LICENSE_MISMATCH"),
            std::make_pair(0x8004C00D, "DRM_E_WRONG_TOKEN_TYPE"),
            std::make_pair(0x8004C00F, "DRM_E_LICENSE_NOT_BOUND"),
            std::make_pair(0x8004C010, "DRM_E_HASH_MISMATCH"),
            std::make_pair(0x8004C012, "DRM_E_LICENSESTORE_NOT_FOUND"),
            std::make_pair(0x8004C013, "DRM_E_LICENSE_NOT_FOUND"),
            std::make_pair(0x8004C014, "DRM_E_LICENSE_VERSION_NOT_SUPPORTED"),
            std::make_pair(0x8004C016, "DRM_E_UNSUPPORTED_ALGORITHM"),
            std::make_pair(0x8004C019, "DRM_E_INVALID_LICENSE_STORE"),
            std::make_pair(0x8004C01A, "DRM_E_FILE_READ_ERROR"),
            std::make_pair(0x8004C01B, "DRM_E_FILE_WRITE_ERROR"),
            std::make_pair(0x8004C01D, "DRM_E_DST_STORE_FULL"),
            std::make_pair(0x8004C01E, "DRM_E_NO_XML_OPEN_TAG"),
            std::make_pair(0x8004C01F, "DRM_E_NO_XML_CLOSE_TAG"),
            std::make_pair(0x8004C020, "DRM_E_INVALID_XML_TAG"),
            std::make_pair(0x8004C021, "DRM_E_NO_XML_CDATA"),
            std::make_pair(0x8004C023, "DRM_E_DST_NAMESPACE_NOT_FOUND"),
            std::make_pair(0x8004C024, "DRM_E_DST_SLOT_NOT_FOUND"),
            std::make_pair(0x8004C025, "DRM_E_DST_SLOT_EXISTS"),
            std::make_pair(0x8004C026, "DRM_E_DST_CORRUPTED"),
            std::make_pair(0x8004C027, "DRM_E_DST_SEEK_ERROR"),
            std::make_pair(0x8004C029, "DRM_E_INVALID_SECURESTORE_PASSWORD"),
            std::make_pair(0x8004C02A, "DRM_E_SECURESTORE_CORRUPT"),
            std::make_pair(0x8004C02B, "DRM_E_SECURESTORE_FULL"),
            std::make_pair(0x8004C02D, "DRM_E_DUPLICATED_HEADER_ATTRIBUTE"),
            std::make_pair(0x8004C02E, "DRM_E_NO_KID_IN_HEADER"),
            std::make_pair(0x8004C02F, "DRM_E_NO_LAINFO_IN_HEADER"),
            std::make_pair(0x8004C030, "DRM_E_NO_CHECKSUM_IN_HEADER"),
            std::make_pair(0x8004C031, "DRM_E_DST_BLOCK_MISMATCH"),
            std::make_pair(0x8004C033, "DRM_E_LICENSE_TOO_LONG"),
            std::make_pair(0x8004C034, "DRM_E_DST_EXISTS"),
            std::make_pair(0x8004C035, "DRM_E_INVALID_DEVICE_CERTIFICATE"),
            std::make_pair(0x8004C036, "DRM_E_DST_LOCK_FAILED"),
            std::make_pair(0x8004C037, "DRM_E_FILE_SEEK_ERROR"),
            std::make_pair(0x8004C038, "DRM_E_DST_NOT_LOCKED_EXCLUSIVE"),
            std::make_pair(0x8004C039, "DRM_E_DST_EXCLUSIVE_LOCK_ONLY"),
            std::make_pair(0x8004C03B, "DRM_E_V1_NOT_SUPPORTED"),
            std::make_pair(0x8004C03C, "DRM_E_HEADER_NOT_SET"),
            std::make_pair(0x8004C03D, "DRM_E_NEED_DEVCERT_INDIV"),
            std::make_pair(0x8004C03E, "DRM_E_MACHINE_ID_MISMATCH"),
            std::make_pair(0x8004C03F, "DRM_E_CLK_INVALID_RESPONSE"),
            std::make_pair(0x8004C040, "DRM_E_CLK_INVALID_DATE"),
            std::make_pair(0x8004C042, "DRM_E_INVALID_DEVCERT_TEMPLATE"),
            std::make_pair(0x8004C043, "DRM_E_DEVCERT_EXCEEDS_SIZE_LIMIT"),
            std::make_pair(0x8004C045, "DRM_E_DEVCERT_READ_ERROR"),
            std::make_pair(0x8004C047, "DRM_E_PRIVKEY_READ_ERROR"),
            std::make_pair(0x8004C049, "DRM_E_DEVCERT_TEMPLATE_READ_ERROR"),
            std::make_pair(0x8004C04A, "DRM_E_CLK_NOT_SUPPORTED"),
            std::make_pair(0x8004C04C, "DRM_E_METERING_NOT_SUPPORTED"),
            std::make_pair(0x8004C04D, "DRM_E_CLK_RESET_STATE_READ_ERROR"),
            std::make_pair(0x8004C04E, "DRM_E_CLK_RESET_STATE_WRITE_ERROR"),
            std::make_pair(0x8004C04F, "DRM_E_XMLNOTFOUND"),
            std::make_pair(0x8004C050, "DRM_E_METERING_WRONG_TID"),
            std::make_pair(0x8004C051, "DRM_E_METERING_INVALID_COMMAND"),
            std::make_pair(0x8004C052, "DRM_E_METERING_STORE_CORRUPT"),
            std::make_pair(0x8004C053, "DRM_E_CERTIFICATE_REVOKED"),
            std::make_pair(0x8004C054, "DRM_E_CRYPTO_FAILED"),
            std::make_pair(0x8004C055, "DRM_E_STACK_CORRUPT"),
            std::make_pair(0x8004C056, "DRM_E_UNKNOWN_BINDING_KEY"),
            std::make_pair(0x8004C057, "DRM_E_V1_LICENSE_CHAIN_NOT_SUPPORTED"),
            std::make_pair(0x8004C059, "DRM_E_POLICY_METERING_DISABLED"),
            std::make_pair(0x8004C05B, "DRM_E_CLK_NOT_SET"),
            std::make_pair(0x8004C05C, "DRM_E_NO_CLK_SUPPORTED"),
            std::make_pair(0x8004C05D, "DRM_E_NO_URL"),
            std::make_pair(0x8004C05E, "DRM_E_UNKNOWN_DEVICE_PROPERTY"),
            std::make_pair(0x8004C05F, "DRM_E_METERING_MID_MISMATCH"),
            std::make_pair(0x8004C060, "DRM_E_METERING_RESPONSE_DECRYPT_FAILED"),
            std::make_pair(0x8004C063, "DRM_E_RIV_TOO_SMALL"),
            std::make_pair(0x8004C064, "DRM_E_STACK_ALREADY_INITIALIZED"),
            std::make_pair(0x8004C065, "DRM_E_DEVCERT_REVOKED"),
            std::make_pair(0x8004C066, "DRM_E_OEM_RSA_DECRYPTION_ERROR"),
            std::make_pair(0x8004C069, "DRM_E_OEM_RSA_ENCRYPTION_ERROR"),
            std::make_pair(0x8004C06A, "DRM_E_DST_NAMESPACE_EXISTS"),
            std::make_pair(0x8004C06B, "DRM_E_PERF_SCOPING_ERROR"),
            std::make_pair(0x8004C06D, "DRM_E_OEM_RSA_INVALID_PRIVATE_KEY"),
            std::make_pair(0x8004C06E, "DRM_E_NO_OPL_CALLBACK"),
            std::make_pair(0x8004C06F, "DRM_E_INVALID_PLAYREADY_OBJECT"),
            std::make_pair(0x8004C070, "DRM_E_DUPLICATE_LICENSE"),
            std::make_pair(0x8004C072, "DRM_E_RECORD_NOT_FOUND"),
            std::make_pair(0x8004C073, "DRM_E_BUFFER_BOUNDS_EXCEEDED"),
            std::make_pair(0x8004C074, "DRM_E_INVALID_BASE64"),
            std::make_pair(0x8004C075, "DRM_E_PROTOCOL_VERSION_NOT_SUPPORTED"),
            std::make_pair(0x8004C076, "DRM_E_INVALID_LICENSE_RESPONSE_SIGNATURE"),
            std::make_pair(0x8004C077, "DRM_E_INVALID_LICENSE_RESPONSE_ID"),
            std::make_pair(0x8004C078, "DRM_E_LICENSE_RESPONSE_SIGNATURE_MISSING"),
            std::make_pair(0x8004C079, "DRM_E_INVALID_DOMAIN_JOIN_RESPONSE_SIGNATURE"),
            std::make_pair(0x8004C07A, "DRM_E_DOMAIN_JOIN_RESPONSE_SIGNATURE_MISSING"),
            std::make_pair(0x8004C07B, "DRM_E_ACTIVATION_REQUIRED"),
            std::make_pair(0x8004C07C, "DRM_E_ACTIVATION_INTERNAL_ERROR"),
            std::make_pair(0x8004C07D, "DRM_E_ACTIVATION_GROUP_CERT_REVOKED_ERROR"),
            std::make_pair(0x8004C07E, "DRM_E_ACTIVATION_NEW_CLIENT_LIB_REQUIRED_ERROR"),
            std::make_pair(0x8004C07F, "DRM_E_ACTIVATION_BAD_REQUEST"),
            std::make_pair(0x8004C080, "DRM_E_FILEIO_ERROR"),
            std::make_pair(0x8004C081, "DRM_E_DISK_SPACE_ERROR"),
            std::make_pair(0x8004C082, "DRM_E_UPLINK_LICENSE_NOT_FOUND"),
            std::make_pair(0x8004C083, "DRM_E_ACTIVATION_CLIENT_ALREADY_CURRENT"),
            std::make_pair(0x8004C084, "DRM_E_LICENSE_REALTIME_EXPIRED"),
            std::make_pair(0x8004C085, "DRM_E_DECRYPTOR_CANNOT_CLONE"),
            std::make_pair(0x8004C086, "DRM_E_ACTIVATION_REQUIRED_REACTIVATION_POSSIBLE"),
            std::make_pair(0x8004C0C0, "DRM_E_LICEVAL_LICENSE_NOT_SUPPLIED"),
            std::make_pair(0x8004C0C1, "DRM_E_LICEVAL_KID_MISMATCH"),
            std::make_pair(0x8004C0C2, "DRM_E_LICEVAL_LICENSE_REVOKED"),
            std::make_pair(0x8004C0C3, "DRM_E_LICEVAL_UPDATE_FAILURE"),
            std::make_pair(0x8004C0C4, "DRM_E_LICEVAL_REQUIRED_REVOCATION_LIST_NOT_AVAILABLE"),
            std::make_pair(0x8004C0C5, "DRM_E_LICEVAL_INVALID_PRND_LICENSE"),
            std::make_pair(0x8004C0E0, "DRM_E_XMR_OBJECT_ALREADY_EXISTS"),
            std::make_pair(0x8004C0E1, "DRM_E_XMR_OBJECT_NOT_FOUND"),
            std::make_pair(0x8004C0E2, "DRM_E_XMR_REQUIRED_OBJECT_MISSING"),
            std::make_pair(0x8004C0E3, "DRM_E_XMR_INVALID_UNKNOWN_OBJECT"),
            std::make_pair(0x8004C0E4, "DRM_E_XMR_LICENSE_BINDABLE"),
            std::make_pair(0x8004C0E5, "DRM_E_XMR_LICENSE_NOT_BINDABLE"),
            std::make_pair(0x8004C0E6, "DRM_E_XMR_UNSUPPORTED_XMR_VERSION"),
            std::make_pair(0x8004C200, "DRM_E_INVALID_DEVCERT_ATTRIBUTE"),
            std::make_pair(0x8004C300, "DRM_E_TEST_PKCRYPTO_FAILURE"),
            std::make_pair(0x8004C301, "DRM_E_TEST_PKSIGN_VERIFY_ERROR"),
            std::make_pair(0x8004C302, "DRM_E_TEST_ENCRYPT_ERROR"),
            std::make_pair(0x8004C303, "DRM_E_TEST_RC4KEY_FAILED"),
            std::make_pair(0x8004C304, "DRM_E_TEST_DECRYPT_ERROR"),
            std::make_pair(0x8004C305, "DRM_E_TEST_DESKEY_FAILED"),
            std::make_pair(0x8004C306, "DRM_E_TEST_CBC_INVERSEMAC_FAILURE"),
            std::make_pair(0x8004C307, "DRM_E_TEST_HMAC_FAILURE"),
            std::make_pair(0x8004C308, "DRM_E_TEST_INVALIDARG"),
            std::make_pair(0x8004C30A, "DRM_E_TEST_DEVICE_PRIVATE_KEY_INCORRECTLY_STORED"),
            std::make_pair(0x8004C30B, "DRM_E_TEST_DRMMANAGER_CONTEXT_NULL"),
            std::make_pair(0x8004C30C, "DRM_E_TEST_UNEXPECTED_REVINFO_RESULT"),
            std::make_pair(0x8004C30D, "DRM_E_TEST_RIV_MISMATCH"),
            std::make_pair(0x8004C310, "DRM_E_TEST_URL_ERROR"),
            std::make_pair(0x8004C311, "DRM_E_TEST_MID_MISMATCH"),
            std::make_pair(0x8004C312, "DRM_E_TEST_METER_CERTIFICATE_MISMATCH"),
            std::make_pair(0x8004C313, "DRM_E_TEST_LICENSE_STATE_MISMATCH"),
            std::make_pair(0x8004C316, "DRM_E_TEST_SOURCE_ID_MISMATCH"),
            std::make_pair(0x8004C317, "DRM_E_TEST_UNEXPECTED_LICENSE_COUNT"),
            std::make_pair(0x8004C318, "DRM_E_TEST_UNEXPECTED_DEVICE_PROPERTY"),
            std::make_pair(0x8004C319, "DRM_E_TEST_DRMMANAGER_MISALIGNED_BYTES"),
            std::make_pair(0x8004C31A, "DRM_E_TEST_LICENSE_RESPONSE_ERROR"),
            std::make_pair(0x8004C31B, "DRM_E_TEST_OPL_MISMATCH"),
            std::make_pair(0x8004C31C, "DRM_E_TEST_INVALID_OPL_CALLBACK"),
            std::make_pair(0x8004C31D, "DRM_E_TEST_INCOMPLETE"),
            std::make_pair(0x8004C31E, "DRM_E_TEST_UNEXPECTED_OUTPUT"),
            std::make_pair(0x8004C322, "DRM_E_TEST_TOO_SLOW"),
            std::make_pair(0x8004C323, "DRM_E_TEST_LICENSESTORE_NOT_OPEN"),
            std::make_pair(0x8004C324, "DRM_E_TEST_DEVICE_NOT_INITED"),
            std::make_pair(0x8004C325, "DRM_E_TEST_VARIABLE_NOT_SET"),
            std::make_pair(0x8004C326, "DRM_E_TEST_NOMORE"),
            std::make_pair(0x8004C327, "DRM_E_TEST_FILE_LOAD_ERROR"),
            std::make_pair(0x8004C328, "DRM_E_TEST_LICENSE_ACQ_FAILED"),
            std::make_pair(0x8004C329, "DRM_E_TEST_UNSUPPORTED_FILE_FORMAT"),
            std::make_pair(0x8004C32A, "DRM_E_TEST_PARSING_ERROR"),
            std::make_pair(0x8004C32B, "DRM_E_TEST_NOTIMPL"),
            std::make_pair(0x8004C32C, "DRM_E_TEST_VARIABLE_NOTFOUND"),
            std::make_pair(0x8004C32D, "DRM_E_TEST_VARIABLE_LISTFULL"),
            std::make_pair(0x8004C32E, "DRM_E_TEST_UNEXPECTED_CONTENT_PROPERTY"),
            std::make_pair(0x8004C32F, "DRM_E_TEST_PRO_HEADER_NOT_SET"),
            std::make_pair(0x8004C330, "DRM_E_TEST_NON_PRO_HEADER_TYPE"),
            std::make_pair(0x8004C331, "DRM_E_TEST_INVALID_DEVICE_WRAPPER"),
            std::make_pair(0x8004C332, "DRM_E_TEST_INVALID_WMDM_WRAPPER"),
            std::make_pair(0x8004C333, "DRM_E_TEST_INVALID_WPD_WRAPPER"),
            std::make_pair(0x8004C334, "DRM_E_TEST_INVALID_FILE"),
            std::make_pair(0x8004C335, "DRM_E_TEST_PROPERTY_NOT_FOUND"),
            std::make_pair(0x8004C336, "DRM_E_TEST_METERING_DATA_INCORRECT"),
            std::make_pair(0x8004C337, "DRM_E_TEST_FILE_ALREADY_OPEN"),
            std::make_pair(0x8004C338, "DRM_E_TEST_FILE_NOT_OPEN"),
            std::make_pair(0x8004C339, "DRM_E_TEST_PICT_COLUMN_TOO_WIDE"),
            std::make_pair(0x8004C33A, "DRM_E_TEST_PICT_COLUMN_MISMATCH"),
            std::make_pair(0x8004C33B, "DRM_E_TEST_TUX_TEST_SKIPPED"),
            std::make_pair(0x8004C33C, "DRM_E_TEST_KEYFILE_VERIFICATION_FAILURE"),
            std::make_pair(0x8004C33D, "DRM_E_TEST_DATA_VERIFICATION_FAILURE"),
            std::make_pair(0x8004C33E, "DRM_E_TEST_NET_FAIL"),
            std::make_pair(0x8004C33F, "DRM_E_TEST_CLEANUP_FAIL"),
            std::make_pair(0x8004C340, "DRM_E_TEST_LICGEN_UNSUPPORTED_VALUE"),
            std::make_pair(0x8004C3E8, "DRM_E_LOGICERR"),
            std::make_pair(0x8004C3E9, "DRM_E_INVALID_REV_INFO"),
            std::make_pair(0x8004C3EA, "DRM_E_SYNCLIST_NOT_SUPPORTED"),
            std::make_pair(0x8004C3EB, "DRM_E_REVOCATION_BUFFER_TOO_SMALL"),
            std::make_pair(0x8004C3EC, "DRM_E_DEVICE_ALREADY_REGISTERED"),
            std::make_pair(0x8004C3ED, "DRM_E_DST_NOT_COMPATIBLE"),
            std::make_pair(0x8004C3F0, "DRM_E_RSA_DECRYPTION_ERROR"),
            std::make_pair(0x8004C3F1, "DRM_E_OEM_RSA_MESSAGE_TOO_BIG"),
            std::make_pair(0x8004C3F2, "DRM_E_METERCERT_NOT_FOUND"),
            std::make_pair(0x8004C3F3, "DRM_E_MODULAR_ARITHMETIC_FAILURE"),
            std::make_pair(0x8004C3F5, "DRM_E_REVOCATION_INVALID_PACKAGE"),
            std::make_pair(0x8004C3F6, "DRM_E_HWID_ERROR"),
            std::make_pair(0x8004C500, "DRM_E_DOMAIN_INVALID_GUID"),
            std::make_pair(0x8004C501, "DRM_E_DOMAIN_INVALID_CUSTOM_DATA_TYPE"),
            std::make_pair(0x8004C502, "DRM_E_DOMAIN_STORE_ADD_DATA"),
            std::make_pair(0x8004C503, "DRM_E_DOMAIN_STORE_GET_DATA"),
            std::make_pair(0x8004C504, "DRM_E_DOMAIN_STORE_DELETE_DATA"),
            std::make_pair(0x8004C505, "DRM_E_DOMAIN_STORE_OPEN_STORE"),
            std::make_pair(0x8004C506, "DRM_E_DOMAIN_STORE_CLOSE_STORE"),
            std::make_pair(0x8004C507, "DRM_E_DOMAIN_BIND_LICENSE"),
            std::make_pair(0x8004C508, "DRM_E_DOMAIN_INVALID_CUSTOM_DATA"),
            std::make_pair(0x8004C509, "DRM_E_DOMAIN_NOT_FOUND"),
            std::make_pair(0x8004C50A, "DRM_E_DOMAIN_INVALID_DOMKEYXMR_DATA"),
            std::make_pair(0x8004C50B, "DRM_E_DOMAIN_STORE_INVALID_KEY_RECORD"),
            std::make_pair(0x8004C50C, "DRM_E_DOMAIN_JOIN_TOO_MANY_KEYS"),
            std::make_pair(0x8004C580, "DRM_E_DEVICE_DOMAIN_JOIN_REQUIRED"),
            std::make_pair(0x8004C600, "DRM_E_SERVER_INTERNAL_ERROR"),
            std::make_pair(0x8004C601, "DRM_E_SERVER_INVALID_MESSAGE"),
            std::make_pair(0x8004C602, "DRM_E_SERVER_DEVICE_LIMIT_REACHED"),
            std::make_pair(0x8004C603, "DRM_E_SERVER_INDIV_REQUIRED"),
            std::make_pair(0x8004C604, "DRM_E_SERVER_SERVICE_SPECIFIC"),
            std::make_pair(0x8004C605, "DRM_E_SERVER_DOMAIN_REQUIRED"),
            std::make_pair(0x8004C606, "DRM_E_SERVER_RENEW_DOMAIN"),
            std::make_pair(0x8004C607, "DRM_E_SERVER_UNKNOWN_METERINGID"),
            std::make_pair(0x8004C608, "DRM_E_SERVER_COMPUTER_LIMIT_REACHED"),
            std::make_pair(0x8004C609, "DRM_E_SERVER_PROTOCOL_FALLBACK"),
            std::make_pair(0x8004C60A, "DRM_E_SERVER_NOT_A_MEMBER"),
            std::make_pair(0x8004C60B, "DRM_E_SERVER_PROTOCOL_VERSION_MISMATCH"),
            std::make_pair(0x8004C60C, "DRM_E_SERVER_UNKNOWN_ACCOUNTID"),
            std::make_pair(0x8004C60D, "DRM_E_SERVER_PROTOCOL_REDIRECT"),
            std::make_pair(0x8004C610, "DRM_E_SERVER_UNKNOWN_TRANSACTIONID"),
            std::make_pair(0x8004C611, "DRM_E_SERVER_INVALID_LICENSEID"),
            std::make_pair(0x8004C612, "DRM_E_SERVER_MAXIMUM_LICENSEID_EXCEEDED"),
            std::make_pair(0x8004C700, "DRM_E_LICACQ_TOO_MANY_LICENSES"),
            std::make_pair(0x8004C701, "DRM_E_LICACQ_ACK_TRANSACTION_ID_TOO_BIG"),
            std::make_pair(0x8004C702, "DRM_E_LICACQ_ACK_MESSAGE_NOT_CREATED"),
            std::make_pair(0x8004C780, "DRM_E_INITIATORS_UNKNOWN_TYPE"),
            std::make_pair(0x8004C781, "DRM_E_INITIATORS_INVALID_SERVICEID"),
            std::make_pair(0x8004C782, "DRM_E_INITIATORS_INVALID_ACCOUNTID"),
            std::make_pair(0x8004C783, "DRM_E_INITIATORS_INVALID_MID"),
            std::make_pair(0x8004C784, "DRM_E_INITIATORS_MISSING_DC_URL"),
            std::make_pair(0x8004C785, "DRM_E_INITIATORS_MISSING_CONTENT_HEADER"),
            std::make_pair(0x8004C786, "DRM_E_INITIATORS_MISSING_LAURL_IN_CONTENT_HEADER"),
            std::make_pair(0x8004C787, "DRM_E_INITIATORS_MISSING_METERCERT_URL"),
            std::make_pair(0x8004C800, "DRM_E_BCERT_INVALID_SIGNATURE_TYPE"),
            std::make_pair(0x8004C801, "DRM_E_BCERT_CHAIN_TOO_DEEP"),
            std::make_pair(0x8004C802, "DRM_E_BCERT_INVALID_CERT_TYPE"),
            std::make_pair(0x8004C803, "DRM_E_BCERT_INVALID_FEATURE"),
            std::make_pair(0x8004C804, "DRM_E_BCERT_INVALID_KEY_USAGE"),
            std::make_pair(0x8004C805, "DRM_E_BCERT_INVALID_SECURITY_VERSION"),
            std::make_pair(0x8004C806, "DRM_E_BCERT_INVALID_KEY_TYPE"),
            std::make_pair(0x8004C807, "DRM_E_BCERT_INVALID_KEY_LENGTH"),
            std::make_pair(0x8004C808, "DRM_E_BCERT_INVALID_MAX_LICENSE_SIZE"),
            std::make_pair(0x8004C809, "DRM_E_BCERT_INVALID_MAX_HEADER_SIZE"),
            std::make_pair(0x8004C80A, "DRM_E_BCERT_INVALID_MAX_LICENSE_CHAIN_DEPTH"),
            std::make_pair(0x8004C80B, "DRM_E_BCERT_INVALID_SECURITY_LEVEL"),
            std::make_pair(0x8004C80C, "DRM_E_BCERT_PRIVATE_KEY_NOT_SPECIFIED"),
            std::make_pair(0x8004C80D, "DRM_E_BCERT_ISSUER_KEY_NOT_SPECIFIED"),
            std::make_pair(0x8004C80E, "DRM_E_BCERT_ACCOUNT_ID_NOT_SPECIFIED"),
            std::make_pair(0x8004C80F, "DRM_E_BCERT_SERVICE_ID_NOT_SPECIFIED"),
            std::make_pair(0x8004C811, "DRM_E_BCERT_DOMAIN_URL_NOT_SPECIFIED"),
            std::make_pair(0x8004C812, "DRM_E_BCERT_DOMAIN_URL_TOO_LONG"),
            std::make_pair(0x8004C814, "DRM_E_BCERT_HARDWARE_ID_TOO_LONG"),
            std::make_pair(0x8004C816, "DRM_E_BCERT_CERT_ID_NOT_SPECIFIED"),
            std::make_pair(0x8004C817, "DRM_E_BCERT_PUBLIC_KEY_NOT_SPECIFIED"),
            std::make_pair(0x8004C818, "DRM_E_BCERT_KEY_USAGES_NOT_SPECIFIED"),
            std::make_pair(0x8004C819, "DRM_E_BCERT_STRING_NOT_NULL_TERMINATED"),
            std::make_pair(0x8004C81A, "DRM_E_BCERT_OBJECTHEADER_LEN_TOO_BIG"),
            std::make_pair(0x8004C81B, "DRM_E_BCERT_INVALID_ISSUERKEY_LENGTH"),
            std::make_pair(0x8004C81C, "DRM_E_BCERT_BASICINFO_CERT_EXPIRED"),
            std::make_pair(0x8004C81D, "DRM_E_BCERT_UNEXPECTED_OBJECT_HEADER"),
            std::make_pair(0x8004C81E, "DRM_E_BCERT_ISSUERKEY_KEYINFO_MISMATCH"),
            std::make_pair(0x8004C81F, "DRM_E_BCERT_INVALID_MAX_KEY_USAGES"),
            std::make_pair(0x8004C820, "DRM_E_BCERT_INVALID_MAX_FEATURES"),
            std::make_pair(0x8004C821, "DRM_E_BCERT_INVALID_CHAIN_HEADER_TAG"),
            std::make_pair(0x8004C822, "DRM_E_BCERT_INVALID_CHAIN_VERSION"),
            std::make_pair(0x8004C823, "DRM_E_BCERT_INVALID_CHAIN_LENGTH"),
            std::make_pair(0x8004C824, "DRM_E_BCERT_INVALID_CERT_HEADER_TAG"),
            std::make_pair(0x8004C825, "DRM_E_BCERT_INVALID_CERT_VERSION"),
            std::make_pair(0x8004C826, "DRM_E_BCERT_INVALID_CERT_LENGTH"),
            std::make_pair(0x8004C827, "DRM_E_BCERT_INVALID_SIGNEDCERT_LENGTH"),
            std::make_pair(0x8004C828, "DRM_E_BCERT_INVALID_PLATFORM_IDENTIFIER"),
            std::make_pair(0x8004C829, "DRM_E_BCERT_INVALID_NUMBER_EXTDATARECORDS"),
            std::make_pair(0x8004C82A, "DRM_E_BCERT_INVALID_EXTDATARECORD"),
            std::make_pair(0x8004C82B, "DRM_E_BCERT_EXTDATA_LENGTH_MUST_PRESENT"),
            std::make_pair(0x8004C82C, "DRM_E_BCERT_EXTDATA_PRIVKEY_MUST_PRESENT"),
            std::make_pair(0x8004C82D, "DRM_E_BCERT_INVALID_EXTDATA_LENGTH"),
            std::make_pair(0x8004C82E, "DRM_E_BCERT_EXTDATA_IS_NOT_PROVIDED"),
            std::make_pair(0x8004C82F, "DRM_E_BCERT_HWIDINFO_IS_MISSING"),
            std::make_pair(0x8004C832, "DRM_E_BCERT_EXTDATAFLAG_CERT_TYPE_MISMATCH"),
            std::make_pair(0x8004C833, "DRM_E_BCERT_METERING_ID_NOT_SPECIFIED"),
            std::make_pair(0x8004C834, "DRM_E_BCERT_METERING_URL_NOT_SPECIFIED"),
            std::make_pair(0x8004C835, "DRM_E_BCERT_METERING_URL_TOO_LONG"),
            std::make_pair(0x8004C836, "DRM_E_BCERT_VERIFICATION_ERRORS"),
            std::make_pair(0x8004C837, "DRM_E_BCERT_REQUIRED_KEYUSAGE_MISSING"),
            std::make_pair(0x8004C838, "DRM_E_BCERT_NO_PUBKEY_WITH_REQUESTED_KEYUSAGE"),
            std::make_pair(0x8004C839, "DRM_E_BCERT_MANUFACTURER_STRING_TOO_LONG"),
            std::make_pair(0x8004C83A, "DRM_E_BCERT_TOO_MANY_PUBLIC_KEYS"),
            std::make_pair(0x8004C83B, "DRM_E_BCERT_OBJECTHEADER_LEN_TOO_SMALL"),
            std::make_pair(0x8004C83C, "DRM_E_BCERT_INVALID_WARNING_DAYS"),
            std::make_pair(0x8004C83D, "DRM_E_BCERT_INVALID_DIGEST"),
            std::make_pair(0x8004C900, "DRM_E_XMLSIG_ECDSA_VERIFY_FAILURE"),
            std::make_pair(0x8004C901, "DRM_E_XMLSIG_SHA_VERIFY_FAILURE"),
            std::make_pair(0x8004C902, "DRM_E_XMLSIG_FORMAT"),
            std::make_pair(0x8004C903, "DRM_E_XMLSIG_PUBLIC_KEY_ID"),
            std::make_pair(0x8004C904, "DRM_E_XMLSIG_INVALID_KEY_FORMAT"),
            std::make_pair(0x8004C905, "DRM_E_XMLSIG_SHA_HASH_SIZE"),
            std::make_pair(0x8004C906, "DRM_E_XMLSIG_ECDSA_SIGNATURE_SIZE"),
            std::make_pair(0x8004CA00, "DRM_E_UTF_UNEXPECTED_END"),
            std::make_pair(0x8004CA01, "DRM_E_UTF_INVALID_CODE"),
            std::make_pair(0x8004CB00, "DRM_E_SOAPXML_INVALID_STATUS_CODE"),
            std::make_pair(0x8004CB01, "DRM_E_SOAPXML_XML_FORMAT"),
            std::make_pair(0x8004CB02, "DRM_E_SOAPXML_WRONG_MESSAGE_TYPE"),
            std::make_pair(0x8004CB03, "DRM_E_SOAPXML_SIGNATURE_MISSING"),
            std::make_pair(0x8004CB04, "DRM_E_SOAPXML_PROTOCOL_NOT_SUPPORTED"),
            std::make_pair(0x8004CB05, "DRM_E_SOAPXML_DATA_NOT_FOUND"),
            std::make_pair(0x8004CC00, "DRM_E_CRYPTO_PUBLIC_KEY_NOT_MATCH"),
            std::make_pair(0x8004CC01, "DRM_E_UNABLE_TO_RESOLVE_LOCATION_TREE"),
            std::make_pair(0x8004CD10, "DRM_E_TEE_INVALID_KEY_DATA"),
            std::make_pair(0x8004CD11, "DRM_E_TEE_PROVISIONING_REQUIRED"),
            std::make_pair(0x8004CD12, "DRM_E_TEE_INVALID_CONTEXT"),
            std::make_pair(0x8004CD13, "DRM_E_TEE_PROVISIONING_REQUEST_EXPIRED"),
            std::make_pair(0x8004CD14, "DRM_E_TEE_CLOCK_NOT_SET"),
            std::make_pair(0x8004CD15, "DRM_E_TEE_BLOB_ACCESS_DENIED"),
            std::make_pair(0x8004CD16, "DRM_E_TEE_PROVISIONING_BAD_NONCE"),
            std::make_pair(0x8004CD17, "DRM_E_TEE_PROVISIONING_NONCE_MISMATCH"),
            std::make_pair(0x8004CD18, "DRM_E_TEE_ROOT_KEY_CHANGED"),
            std::make_pair(0x8004CD19, "DRM_E_TEE_PROVISIONING_INVALID_RESPONSE"),
            std::make_pair(0x8004CD1A, "DRM_E_TEE_PROXY_INVALID_SERIALIZATION_MESSAGE"),
            std::make_pair(0x8004CD1B, "DRM_E_TEE_PROXY_INVALID_SERIALIZATION_TYPE"),
            std::make_pair(0x8004CD1C, "DRM_E_TEE_LAYER_UNINITIALIZED"),
            std::make_pair(0x8004CD1D, "DRM_E_TEE_INVALID_HEADER_FOOTER_SIZE"),
            std::make_pair(0x8004CD1E, "DRM_E_TEE_MESSAGE_TOO_LARGE"),
            std::make_pair(0x8004CD1F, "DRM_E_TEE_CLOCK_DRIFTED"),
            std::make_pair(0x8004CD20, "DRM_E_TEE_PROXY_INVALID_BUFFER_ALIGNMENT"),
            std::make_pair(0x8004CD21, "DRM_E_TEE_PROXY_INVALID_ALIGNMENT"),
            std::make_pair(0x8004CD22, "DRM_E_TEE_OUTPUT_PROTECTION_REQUIREMENTS_NOT_MET"),
            std::make_pair(0x8004CE00, "DRM_E_ND_MUST_REVALIDATE"),
            std::make_pair(0x8004CE01, "DRM_E_ND_INVALID_MESSAGE"),
            std::make_pair(0x8004CE02, "DRM_E_ND_INVALID_MESSAGE_TYPE"),
            std::make_pair(0x8004CE03, "DRM_E_ND_INVALID_MESSAGE_VERSION"),
            std::make_pair(0x8004CE04, "DRM_E_ND_INVALID_SESSION"),
            std::make_pair(0x8004CE05, "DRM_E_ND_MEDIA_SESSION_LIMIT_REACHED"),
            std::make_pair(0x8004CE06, "DRM_E_ND_UNABLE_TO_VERIFY_PROXIMITY"),
            std::make_pair(0x8004CE07, "DRM_E_ND_INVALID_PROXIMITY_RESPONSE"),
            std::make_pair(0x8004CE08, "DRM_E_ND_DEVICE_LIMIT_REACHED"),
            std::make_pair(0x8004CE09, "DRM_E_ND_BAD_REQUEST"),
            std::make_pair(0x8004CE0A, "DRM_E_ND_FAILED_SEEK"),
            std::make_pair(0x8004CE0B, "DRM_E_ND_INVALID_CONTEXT"),
            std::make_pair(0x8004CF00, "DRM_E_ASF_BAD_ASF_HEADER"),
            std::make_pair(0x8004CF01, "DRM_E_ASF_BAD_PACKET_HEADER"),
            std::make_pair(0x8004CF02, "DRM_E_ASF_BAD_PAYLOAD_HEADER"),
            std::make_pair(0x8004CF03, "DRM_E_ASF_BAD_DATA_HEADER"),
            std::make_pair(0x8004CF04, "DRM_E_ASF_INVALID_OPERATION"),
            std::make_pair(0x8004CF06, "DRM_E_ASF_EXTENDED_STREAM_PROPERTIES_OBJ_NOT_FOUND"),
            std::make_pair(0x8004CF20, "DRM_E_ASF_INVALID_DATA"),
            std::make_pair(0x8004CF21, "DRM_E_ASF_TOO_MANY_PAYLOADS"),
            std::make_pair(0x8004CF22, "DRM_E_ASF_BANDWIDTH_OVERRUN"),
            std::make_pair(0x8004CF23, "DRM_E_ASF_INVALID_STREAM_NUMBER"),
            std::make_pair(0x8004CF24, "DRM_E_ASF_LATE_SAMPLE"),
            std::make_pair(0x8004CF25, "DRM_E_ASF_NOT_ACCEPTING"),
            std::make_pair(0x8004CF26, "DRM_E_ASF_UNEXPECTED"),
            std::make_pair(0x8004D000, "DRM_E_NONCE_STORE_TOKEN_NOT_FOUND"),
            std::make_pair(0x8004D001, "DRM_E_NONCE_STORE_OPEN_STORE"),
            std::make_pair(0x8004D002, "DRM_E_NONCE_STORE_CLOSE_STORE"),
            std::make_pair(0x8004D003, "DRM_E_NONCE_STORE_ADD_LICENSE"),
            std::make_pair(0x8004D200, "DRM_E_POLICYSTATE_NOT_FOUND"),
            std::make_pair(0x8004D201, "DRM_E_POLICYSTATE_CORRUPTED"),
            std::make_pair(0x8004D300, "DRM_E_MOVE_DENIED"),
            std::make_pair(0x8004D301, "DRM_E_INVALID_MOVE_RESPONSE"),
            std::make_pair(0x8004D302, "DRM_E_MOVE_NONCE_MISMATCH"),
            std::make_pair(0x8004D304, "DRM_E_MOVE_STORE_OPEN_STORE"),
            std::make_pair(0x8004D305, "DRM_E_MOVE_STORE_CLOSE_STORE"),
            std::make_pair(0x8004D306, "DRM_E_MOVE_STORE_ADD_DATA"),
            std::make_pair(0x8004D307, "DRM_E_MOVE_STORE_GET_DATA"),
            std::make_pair(0x8004D308, "DRM_E_MOVE_FORMAT_INVALID"),
            std::make_pair(0x8004D309, "DRM_E_MOVE_SIGNATURE_INVALID"),
            std::make_pair(0x8004D30A, "DRM_E_COPY_DENIED"),
            std::make_pair(0x8004D400, "DRM_E_XB_OBJECT_NOTFOUND"),
            std::make_pair(0x8004D401, "DRM_E_XB_INVALID_OBJECT"),
            std::make_pair(0x8004D402, "DRM_E_XB_OBJECT_ALREADY_EXISTS"),
            std::make_pair(0x8004D403, "DRM_E_XB_REQUIRED_OBJECT_MISSING"),
            std::make_pair(0x8004D404, "DRM_E_XB_UNKNOWN_ELEMENT_TYPE"),
            std::make_pair(0x8004D405, "DRM_E_XB_INVALID_VERSION"),
            std::make_pair(0x8004D406, "DRM_E_XB_MAX_UNKNOWN_CONTAINER_DEPTH"),
            std::make_pair(0x8004D407, "DRM_E_XB_INVALID_ALIGNMENT"),
            std::make_pair(0x8004D408, "DRM_E_XB_OBJECT_OUT_OF_RANGE"),
            std::make_pair(0x8004D700, "DRM_E_PRND_MESSAGE_VERSION_INVALID"),
            std::make_pair(0x8004D701, "DRM_E_PRND_MESSAGE_WRONG_TYPE"),
            std::make_pair(0x8004D702, "DRM_E_PRND_MESSAGE_INVALID"),
            std::make_pair(0x8004D703, "DRM_E_PRND_SESSION_ID_INVALID"),
            std::make_pair(0x8004D704, "DRM_E_PRND_PROXIMITY_DETECTION_REQUEST_CHANNEL_TYPE_UNSUPPORTED"),
            std::make_pair(0x8004D705, "DRM_E_PRND_PROXIMITY_DETECTION_RESPONSE_INVALID"),
            std::make_pair(0x8004D706, "DRM_E_PRND_PROXIMITY_DETECTION_RESPONSE_TIMEOUT"),
            std::make_pair(0x8004D707, "DRM_E_PRND_LICENSE_REQUEST_CID_CALLBACK_REQUIRED"),
            std::make_pair(0x8004D708, "DRM_E_PRND_LICENSE_RESPONSE_CLMID_INVALID"),
            std::make_pair(0x8004D709, "DRM_E_PRND_CERTIFICATE_NOT_RECEIVER"),
            std::make_pair(0x8004D70A, "DRM_E_PRND_CANNOT_RENEW_USING_NEW_SESSION"),
            std::make_pair(0x8004D70B, "DRM_E_PRND_INVALID_CUSTOM_DATA_TYPE"),
            std::make_pair(0x8004D70C, "DRM_E_PRND_CLOCK_OUT_OF_SYNC"),
            std::make_pair(0x8004D70D, "DRM_E_PRND_CANNOT_REBIND_PRND_RECEIVED_LICENSE"),
            std::make_pair(0x8004D70E, "DRM_E_PRND_CANNOT_REGISTER_USING_EXISTING_SESSION"),
            std::make_pair(0x8004D70F, "DRM_E_PRND_BUSY_PERFORMING_RENEWAL"),
            std::make_pair(0x8004D710, "DRM_E_PRND_LICENSE_REQUEST_INVALID_ACTION"),
            std::make_pair(0x8004D711, "DRM_E_PRND_TRANSMITTER_UNAUTHORIZED"),
            std::make_pair(0x8004D712, "DRM_E_PRND_TX_SESSION_EXPIRED"),
            std::make_pair(0x8004D713, "DRM_E_PRND_INCOMPLETE_PROXIMITY_DETECTION"),
            std::make_pair(0x8004D714, "DRM_E_PRND_INVALID_CERT_DIGEST"),
            std::make_pair(0x8004D800, "DRM_E_M2TS_PAT_PID_IS_NOT_ZERO"),
            std::make_pair(0x8004D801, "DRM_E_M2TS_PTS_NOT_EXIST"),
            std::make_pair(0x8004D802, "DRM_E_M2TS_PES_PACKET_LENGTH_NOT_SPECIFIED"),
            std::make_pair(0x8004D803, "DRM_E_M2TS_OUTPUT_BUFFER_FULL"),
            std::make_pair(0x8004D804, "DRM_E_M2TS_CONTEXT_NOT_INITIALIZED"),
            std::make_pair(0x8004D805, "DRM_E_M2TS_NEED_KEY_DATA"),
            std::make_pair(0x8004D806, "DRM_E_M2TS_DDPLUS_FORMAT_INVALID"),
            std::make_pair(0x8004D807, "DRM_E_M2TS_NOT_UNIT_START_PACKET"),
            std::make_pair(0x8004D808, "DRM_E_M2TS_TOO_MANY_SUBSAMPLES"),
            std::make_pair(0x8004D809, "DRM_E_M2TS_TABLE_ID_INVALID"),
            std::make_pair(0x8004D80A, "DRM_E_M2TS_PACKET_SYNC_BYTE_INVALID"),
            std::make_pair(0x8004D80B, "DRM_E_M2TS_ADAPTATION_LENGTH_INVALID"),
            std::make_pair(0x8004D80C, "DRM_E_M2TS_PAT_HEADER_INVALID"),
            std::make_pair(0x8004D80D, "DRM_E_M2TS_PMT_HEADER_INVALID"),
            std::make_pair(0x8004D80E, "DRM_E_M2TS_PES_START_CODE_NOT_FOUND"),
            std::make_pair(0x8004D80F, "DRM_E_M2TS_STREAM_OR_PACKET_TYPE_CHANGED"),
            std::make_pair(0x8004D810, "DRM_E_M2TS_INTERNAL_ERROR"),
            std::make_pair(0x8004D811, "DRM_E_M2TS_ADTS_FORMAT_INVALID"),
            std::make_pair(0x8004D812, "DRM_E_M2TS_MPEGA_FORMAT_INVALID"),
            std::make_pair(0x8004D813, "DRM_E_M2TS_CA_DESCRIPTOR_LENGTH_INVALID"),
            std::make_pair(0x8004D814, "DRM_E_M2TS_CRC_FIELD_INVALID"),
            std::make_pair(0x8004D815, "DRM_E_M2TS_INCOMPLETE_SECTION_HEADER"),
            std::make_pair(0x8004D816, "DRM_E_M2TS_INVALID_UNALIGNED_DATA"),
            std::make_pair(0x8004D817, "DRM_E_M2TS_GET_ENCRYPTED_DATA_FIRST"),
            std::make_pair(0x8004D818, "DRM_E_M2TS_CANNOT_CHANGE_PARAMETER"),
            std::make_pair(0x8004D819, "DRM_E_M2TS_UNKNOWN_PACKET"),
            std::make_pair(0x8004D820, "DRM_E_M2TS_DROP_PACKET"),
            std::make_pair(0x8004D821, "DRM_E_M2TS_DROP_PES"),
            std::make_pair(0x8004D822, "DRM_E_M2TS_INCOMPLETE_PES"),
            std::make_pair(0x8004D823, "DRM_E_M2TS_WAITED_TOO_LONG"),
            std::make_pair(0x8004D824, "DRM_E_M2TS_SECTION_LENGTH_INVALID"),
            std::make_pair(0x8004D825, "DRM_E_M2TS_PROGRAM_INFO_LENGTH_INVALID"),
            std::make_pair(0x8004D826, "DRM_E_M2TS_PES_HEADER_INVALID"),
            std::make_pair(0x8004D827, "DRM_E_M2TS_ECM_PAYLOAD_OVER_LIMIT"),
            std::make_pair(0x8004D828, "DRM_E_M2TS_SET_CA_PID_FAILED"),
            std::make_pair(0x8004D901, "DRM_E_LICGEN_CANNOT_PERSIST_LICENSE"),
            std::make_pair(0x8004D902, "DRM_E_LICGEN_PERSISTENT_REMOTE_LICENSE"),
            std::make_pair(0x8004D903, "DRM_E_LICGEN_EXPIRE_AFTER_FIRST_PLAY_REMOTE_LICENSE"),
            std::make_pair(0x8004D904, "DRM_E_LICGEN_ROOT_LICENSE_CANNOT_ENCRYPT"),
            std::make_pair(0x8004D905, "DRM_E_LICGEN_EMBED_LOCAL_LICENSE"),
            std::make_pair(0x8004D906, "DRM_E_LICGEN_LOCAL_LICENSE_WITH_REMOTE_CERTIFICATE"),
            std::make_pair(0x8004D907, "DRM_E_LICGEN_PLAY_ENABLER_REMOTE_LICENSE"),
            std::make_pair(0x8004D908, "DRM_E_LICGEN_DUPLICATE_PLAY_ENABLER"),
            std::make_pair(0x8004D909, "DRM_E_LICGEN_CHILD_SECURITY_LEVEL_TOO_LOW"),
            std::make_pair(0x8004DA00, "DRM_E_H264_PARSING_FAILED"),
            std::make_pair(0x8004DA01, "DRM_E_H264_SPS_PROFILE"),
            std::make_pair(0x8004DA02, "DRM_E_H264_SPS_IDC"),
            std::make_pair(0x8004DA03, "DRM_E_H264_SPS_SPSID"),
            std::make_pair(0x8004DA04, "DRM_E_H264_SPS_FRAMENUM"),
            std::make_pair(0x8004DA05, "DRM_E_H264_SPS_POCTYPE"),
            std::make_pair(0x8004DA06, "DRM_E_H264_SPS_POCLSB"),
            std::make_pair(0x8004DA07, "DRM_E_H264_SPS_POCCYCLE"),
            std::make_pair(0x8004DA08, "DRM_E_H264_SPS_NUMREFFRAMES"),
            std::make_pair(0x8004DA09, "DRM_E_H264_SPS_CHROMATOP"),
            std::make_pair(0x8004DA0A, "DRM_E_H264_SPS_CHROMABOTTOM"),
            std::make_pair(0x8004DA0B, "DRM_E_H264_SPS_NALHRD"),
            std::make_pair(0x8004DA0C, "DRM_E_H264_SPS_VLDHRD"),
            std::make_pair(0x8004DA0D, "DRM_E_H264_SPS_VUIBPPD"),
            std::make_pair(0x8004DA0E, "DRM_E_H264_SPS_VUIBPMD"),
            std::make_pair(0x8004DA0F, "DRM_E_H264_SPS_VUIMMLH"),
            std::make_pair(0x8004DA10, "DRM_E_H264_SPS_VUIMMLV"),
            std::make_pair(0x8004DA11, "DRM_E_H264_SPS_VUINRF"),
            std::make_pair(0x8004DA12, "DRM_E_H264_SPS_VUIMDFB"),
            std::make_pair(0x8004DA13, "DRM_E_H264_SPS_WIDTH_HEIGHT"),
            std::make_pair(0x8004DA14, "DRM_E_H264_SPS_AREA"),
            std::make_pair(0x8004DA15, "DRM_E_H264_SPS_MINHEIGHT2"),
            std::make_pair(0x8004DA16, "DRM_E_H264_SPS_MINHEIGHT3"),
            std::make_pair(0x8004DA17, "DRM_E_H264_SPS_CROPWIDTH"),
            std::make_pair(0x8004DA18, "DRM_E_H264_SPS_CROPHEIGHT"),
            std::make_pair(0x8004DA19, "DRM_E_H264_SPS_MORE_RBSP"),
            std::make_pair(0x8004DA1A, "DRM_E_H264_SPS_CHROMA_IDC"),
            std::make_pair(0x8004DA1B, "DRM_E_H264_SPS_BITDEPTHLUMA"),
            std::make_pair(0x8004DA1C, "DRM_E_H264_SPS_BITDEPTHCHROMA"),
            std::make_pair(0x8004DA1D, "DRM_E_H264_SPS_DELTASCALE1"),
            std::make_pair(0x8004DA1E, "DRM_E_H264_SPS_DELTASCALE2"),
            std::make_pair(0x8004DA30, "DRM_E_H264_BITSTREAM_TOOMANY"),
            std::make_pair(0x8004DA31, "DRM_E_H264_BITSTREAM_TOOSHORT1"),
            std::make_pair(0x8004DA32, "DRM_E_H264_BITSTREAM_TOOSHORT2"),
            std::make_pair(0x8004DA33, "DRM_E_H264_BITSTREAM_TOOSHORT3"),
            std::make_pair(0x8004DA34, "DRM_E_H264_BITSTREAM_TOOSHORT4"),
            std::make_pair(0x8004DA35, "DRM_E_H264_BITSTREAM_TOOSHORT5"),
            std::make_pair(0x8004DA36, "DRM_E_H264_BITSTREAM_EXGOLOBMTOOLONG1"),
            std::make_pair(0x8004DA37, "DRM_E_H264_BITSTREAM_EXGOLOBMTOOLONG2"),
            std::make_pair(0x8004DA40, "DRM_E_H264_NALU_NO_START_CODE"),
            std::make_pair(0x8004DA41, "DRM_E_H264_NALU_ALL_ZERO"),
            std::make_pair(0x8004DA42, "DRM_E_H264_NALU_EMULATION"),
            std::make_pair(0x8004DA50, "DRM_E_H264_PPS_PPSID"),
            std::make_pair(0x8004DA51, "DRM_E_H264_PPS_SPSID"),
            std::make_pair(0x8004DA52, "DRM_E_H264_PPS_SPS_NOT_FOUND"),
            std::make_pair(0x8004DA53, "DRM_E_H264_PPS_NUM_SLICE_GROUPS"),
            std::make_pair(0x8004DA54, "DRM_E_H264_PPS_SLICE_GROUP_MAX"),
            std::make_pair(0x8004DA55, "DRM_E_H264_PPS_RUN_LENGTH"),
            std::make_pair(0x8004DA56, "DRM_E_H264_PPS_TOP_LEFT"),
            std::make_pair(0x8004DA57, "DRM_E_H264_PPS_SLICE_GROUP_RATE"),
            std::make_pair(0x8004DA58, "DRM_E_H264_PPS_SLICE_GROUP_MAP"),
            std::make_pair(0x8004DA59, "DRM_E_H264_PPS_SLICE_GROUP_ID"),
            std::make_pair(0x8004DA5A, "DRM_E_H264_PPS_REF_IDX_L0"),
            std::make_pair(0x8004DA5B, "DRM_E_H264_PPS_REF_IDX_L1"),
            std::make_pair(0x8004DA5C, "DRM_E_H264_PPS_WEIGHTED_BIPRED"),
            std::make_pair(0x8004DA5D, "DRM_E_H264_PPS_PIC_INIT_QP"),
            std::make_pair(0x8004DA5E, "DRM_E_H264_PPS_PIC_INIT_QS"),
            std::make_pair(0x8004DA5F, "DRM_E_H264_PPS_PIC_CHROMA_QP"),
            std::make_pair(0x8004DA61, "DRM_E_H264_PPS_REDUN_PIC_COUNT"),
            std::make_pair(0x8004DA62, "DRM_E_H264_PPS_DELTA_SCALE1"),
            std::make_pair(0x8004DA63, "DRM_E_H264_PPS_DELTA_SCALE2"),
            std::make_pair(0x8004DA64, "DRM_E_H264_PPS_SECOND_CHROMA_QP"),
            std::make_pair(0x8004DA65, "DRM_E_H264_PPS_MORE_RBSP"),
            std::make_pair(0x8004DA70, "DRM_E_H264_SH_SLICE_TYPE"),
            std::make_pair(0x8004DA71, "DRM_E_H264_SH_SLICE_TYPE_UNSUPPORTED"),
            std::make_pair(0x8004DA72, "DRM_E_H264_SH_PPSID"),
            std::make_pair(0x8004DA73, "DRM_E_H264_SH_PPS_NOT_FOUND"),
            std::make_pair(0x8004DA74, "DRM_E_H264_SH_SPS_NOT_FOUND"),
            std::make_pair(0x8004DA75, "DRM_E_H264_SH_SLICE_TYPE_PROFILE"),
            std::make_pair(0x8004DA76, "DRM_E_H264_SH_IDR_FRAME_NUM"),
            std::make_pair(0x8004DA77, "DRM_E_H264_SH_FIRST_MB_IN_SLICE"),
            std::make_pair(0x8004DA78, "DRM_E_H264_SH_IDR_PIC_ID"),
            std::make_pair(0x8004DA79, "DRM_E_H264_SH_REDUN_PIC_COUNT"),
            std::make_pair(0x8004DA7A, "DRM_E_H264_SH_NUM_REF_IDX_LX0"),
            std::make_pair(0x8004DA7B, "DRM_E_H264_SH_NUM_REF_IDX_LX1"),
            std::make_pair(0x8004DA7C, "DRM_E_H264_SH_REF_PIC_LIST_REORDER0"),
            std::make_pair(0x8004DA7D, "DRM_E_H264_SH_REF_PIC_LIST_REORDER1"),
            std::make_pair(0x8004DA7E, "DRM_E_H264_SH_LUMA_WEIGHT_DENOM"),
            std::make_pair(0x8004DA7F, "DRM_E_H264_SH_CHROMA_WEIGHT_DENOM"),
            std::make_pair(0x8004DA80, "DRM_E_H264_SH_WP_WEIGHT_LUMA0"),
            std::make_pair(0x8004DA81, "DRM_E_H264_SH_WP_OFFSET_LUMA0"),
            std::make_pair(0x8004DA82, "DRM_E_H264_SH_WP_WEIGHT_CHROMA0"),
            std::make_pair(0x8004DA83, "DRM_E_H264_SH_WP_OFFSET_CHROMA0"),
            std::make_pair(0x8004DA84, "DRM_E_H264_SH_WP_WEIGHT_LUMA1"),
            std::make_pair(0x8004DA85, "DRM_E_H264_SH_WP_OFFSET_LUMA1"),
            std::make_pair(0x8004DA86, "DRM_E_H264_SH_WP_WEIGHT_CHROMA1"),
            std::make_pair(0x8004DA87, "DRM_E_H264_SH_WP_OFFSET_CHROMA1"),
            std::make_pair(0x8004DA88, "DRM_E_H264_SH_NUM_REF_PIC_MARKING"),
            std::make_pair(0x8004DA89, "DRM_E_H264_SH_MMCO4_DUPLICATE"),
            std::make_pair(0x8004DA8A, "DRM_E_H264_SH_MMCO4_MAX_LONG_TERM_FRAME"),
            std::make_pair(0x8004DA8B, "DRM_E_H264_SH_MMCO5_DUPLICATE"),
            std::make_pair(0x8004DA8C, "DRM_E_H264_SH_MMCO5_FOLLOWS_MMC06"),
            std::make_pair(0x8004DA8D, "DRM_E_H264_SH_MMCO5_COEXIST_MMCO_1_OR_3"),
            std::make_pair(0x8004DA8E, "DRM_E_H264_SH_MMCO6_DUPLICATE"),
            std::make_pair(0x8004DA8F, "DRM_E_H264_SH_MODEL_NUMBER"),
            std::make_pair(0x8004DA90, "DRM_E_H264_SH_SLICE_QP"),
            std::make_pair(0x8004DA91, "DRM_E_H264_SH_LF_ALPHA_C0_OFFSET"),
            std::make_pair(0x8004DA92, "DRM_E_H264_SH_LF_BETA_OFFSET"),
            std::make_pair(0x8004DA93, "DRM_E_H264_SH_SLICE_GROUP_CHANGE"),
            std::make_pair(0x8004DB00, "DRM_E_RPROV_INVALID_REQUEST"),
            std::make_pair(0x8004DB01, "DRM_E_RPROV_VERSION_MISSMATCH"),
            std::make_pair(0x8004DB02, "DRM_E_RPROV_INVALID_RESPONSE"),
            std::make_pair(0x8004DB03, "DRM_E_RPROV_BOOTSTRAP_FAILURE"),
            std::make_pair(0x8004DB04, "DRM_E_FIRMWARE_REVOKED"),
            std::make_pair(0x8004DB05, "DRM_E_RPROV_SKIP_BOOTSTRAP"),
            std::make_pair(0x8004DC00, "DRM_E_SECURESTOP_STORE_CORRUPT"),
            std::make_pair(0x8004DC02, "DRM_E_SECURESTOP_SESSION_LOCKED"),
            std::make_pair(0x8004DC03, "DRM_E_SECURESTOP_SESSION_CORRUPT"),
            std::make_pair(0x8004DC04, "DRM_E_SECURESTOP_SESSION_ACTIVE"),
            std::make_pair(0x8004DC05, "DRM_E_SECURESTOP_SESSION_NOT_FOUND"),
            std::make_pair(0x8004DC06, "DRM_E_SECURESTOP_INVALID_RESPONSE"),
            std::make_pair(0x8004DC07, "DRM_E_SECURESTOP_SESSION_STOPPED"),
            std::make_pair(0x8004DC08, "DRM_E_SECURESTOP_INVALID_PUBLISHER_ID"),
            std::make_pair(0x8004DC09, "DRM_E_SECURESTOP_PUBLISHER_ID_INCONSISTENT"),
            std::make_pair(0x8004DC0A, "DRM_E_SECURESTOP_INCONSISTENT"),
            std::make_pair(0x8004110C, "DRM_E_DEPRECATED_CH_UNSUPPORTED_HASH_ALGORITHM"),
            std::make_pair(0x8004110D, "DRM_E_DEPRECATED_CH_UNSUPPORTED_SIGN_ALGORITHM"),
            std::make_pair(0x80041113, "DRM_E_DEPRECATED_CH_NOT_SIGNED"),
            std::make_pair(0x80041116, "DRM_E_DEPRECATED_CH_UNKNOWN_ERROR"),
            std::make_pair(0x80041201, "DRM_E_DEPRECATED_LIC_INIT_FAILURE"),
            std::make_pair(0x80041202, "DRM_E_DEPRECATED_LIC_LICENSE_NOTSET"),
            std::make_pair(0x80041204, "DRM_E_DEPRECATED_LIC_MEMORY_ALLOCATION_ERROR"),
            std::make_pair(0x80041206, "DRM_E_DEPRECATED_LIC_FIELD_MISSING"),
            std::make_pair(0x80041208, "DRM_E_DEPRECATED_LIC_UNKNOWN_ERROR"),
            std::make_pair(0x80041209, "DRM_E_DEPRECATED_LIC_INVALID_REVLIST"),
            std::make_pair(0x8004120A, "DRM_E_DEPRECATED_LIC_EXPIRED_CERT"),
            std::make_pair(0x80041401, "DRM_E_DEPRECATED_CPRMEXP_PARAM_NOT_OPTIONAL"),
            std::make_pair(0x80041402, "DRM_E_DEPRECATED_CPRMEXP_MEMORY_ALLOCATION_ERROR"),
            std::make_pair(0x8004140A, "DRM_E_DEPRECATED_CPRMEXP_ENDOFBUFFER"),
            std::make_pair(0x80048013, "DRM_E_DEPRECATED_LIC_KEY_AND_CERT_MISMATCH"),
            std::make_pair(0x800480D0, "DRM_E_DEPRECATED_SYNC_ENTRY_NOT_FOUND"),
            std::make_pair(0x800480D1, "DRM_E_DEPRECATED_STACK_TOO_SMALL"),
            std::make_pair(0x8004A006, "DRM_E_DEPRECATED_CONTRACT_FAILED"),
            std::make_pair(0x8004A017, "DRM_E_DEPRECATED_NO_LICENSES_TO_SYNC"),
            std::make_pair(0x8004C004, "DRM_E_DEPRECATED_INCOMPATABLE_LICENSE_SIZE"),
            std::make_pair(0x8004C005, "DRM_E_DEPRECATED_INVALID_LICENSE_FLAGS"),
            std::make_pair(0x8004C007, "DRM_E_DEPRECATED_CONDITION_FAIL"),
            std::make_pair(0x8004C00A, "DRM_E_DEPRECATED_LICENSE_NOT_YET_VALID"),
            std::make_pair(0x8004C00E, "DRM_E_DEPRECATED_NO_RIGHTS_REQUESTED"),
            std::make_pair(0x8004C011, "DRM_E_DEPRECATED_INVALID_TIME"),
            std::make_pair(0x8004C015, "DRM_E_DEPRECATED_INVALID_BIND_ID"),
            std::make_pair(0x8004C017, "DRM_E_DEPRECATED_ALGORITHM_NOT_SET"),
            std::make_pair(0x8004C018, "DRM_E_DEPRECATED_LICENSE_SERVER_NEEDS_KEY"),
            std::make_pair(0x8004C01C, "DRM_E_DEPRECATED_CLIENT_TIME_INVALID"),
            std::make_pair(0x8004C022, "DRM_E_DEPRECATED_DST_NAMESPACE_FULL"),
            std::make_pair(0x8004C028, "DRM_E_DEPRECATED_DST_NAMESPACE_IN_USE"),
            std::make_pair(0x8004C02C, "DRM_E_DEPRECATED_NO_ACTION_IN_LICENSE_REQUEST"),
            std::make_pair(0x8004C032, "DRM_E_DEPRECATED_BACKUP_EXISTS"),
            std::make_pair(0x8004C03A, "DRM_E_DEPRECATED_DST_RESERVED_KEY_DETECTED"),
            std::make_pair(0x8004C041, "DRM_E_DEPRECATED_CLK_UNSUPPORTED_VALUE"),
            std::make_pair(0x8004C044, "DRM_E_DEPRECATED_DEVCERT_TEMPLATE_EXCEEDS_SIZE_LIMIT"),
            std::make_pair(0x8004C046, "DRM_E_DEPRECATED_DEVCERT_WRITE_ERROR"),
            std::make_pair(0x8004C048, "DRM_E_DEPRECATED_PRIVKEY_WRITE_ERROR"),
            std::make_pair(0x8004C04B, "DRM_E_DEPRECATED_DEVCERT_INDIV_NOT_SUPPORTED"),
            std::make_pair(0x8004C058, "DRM_E_DEPRECATED_WRONG_TOKEN_TYPE"),
            std::make_pair(0x8004C05A, "DRM_E_DEPRECATED_POLICY_ONLINE_DISABLED"),
            std::make_pair(0x8004C067, "DRM_E_DEPRECATED_INVALID_DEVSTORE_ATTRIBUTE"),
            std::make_pair(0x8004C068, "DRM_E_DEPRECATED_INVALID_DEVSTORE_ENTRY"),
            std::make_pair(0x8004C06C, "DRM_E_DEPRECATED_PRECISION_ARITHMETIC_FAIL"),
            std::make_pair(0x8004C071, "DRM_E_DEPRECATED_REVOCATION_NOT_SUPPORTED"),
            std::make_pair(0x8004C0A0, "DRM_E_DEPRECATED_LRB_NO_LGPUBKEY"),
            std::make_pair(0x8004C0A1, "DRM_E_DEPRECATED_LRB_INVALID_SIGNATURE"),
            std::make_pair(0x8004C0A2, "DRM_E_DEPRECATED_LRB_LGPUBKEY_MISMATCH"),
            std::make_pair(0x8004C0A3, "DRM_E_DEPRECATED_LRB_INVALID_LICENSE_DATA"),
            std::make_pair(0x8004C100, "DRM_E_DEPRECATED_NOT_CRL_BLOB"),
            std::make_pair(0x8004C101, "DRM_E_DEPRECATED_BAD_CRL_BLOB"),
            std::make_pair(0x8004C31F, "DRM_E_DEPRECATED_TEST_DLA_NO_CONTENT_HEADER"),
            std::make_pair(0x8004C320, "DRM_E_DEPRECATED_TEST_DLA_CONTENT_HEADER_FOUND"),
            std::make_pair(0x8004C321, "DRM_E_DEPRECATED_TEST_SYNC_LSD_INCORRECT"),
            std::make_pair(0x8004C3F4, "DRM_E_DEPRECATED_FEATURE_NOT_SUPPORTED"),
            std::make_pair(0x8004C810, "DRM_E_DEPRECATED_BCERT_CLIENT_ID_NOT_SPECIFIED"),
            std::make_pair(0x8004C813, "DRM_E_DEPRECATED_BCERT_HARDWARE_ID_NOT_SPECIFIED"),
            std::make_pair(0x8004C815, "DRM_E_DEPRECATED_BCERT_SERIAL_NUM_NOT_SPECIFIED"),
            std::make_pair(0x8004C830, "DRM_E_DEPRECATED_BCERT_INVALID_EXTDATA_SIGNED_LENGTH"),
            std::make_pair(0x8004C831, "DRM_E_DEPRECATED_BCERT_INVALID_EXTDATA_RECORD_TYPE"),
            std::make_pair(0x8004CD00, "DRM_E_DEPRECATED_SECURE_TRACE_BAD_GLOBAL_DATA_POINTER"),
            std::make_pair(0x8004CD01, "DRM_E_DEPRECATED_SECURE_TRACE_INVALID_GLOBAL_DATA"),
            std::make_pair(0x8004CD02, "DRM_E_DEPRECATED_SECURE_TRACE_FORMATTING_ERROR"),
            std::make_pair(0x8004CD03, "DRM_E_DEPRECATED_SECURE_TRACE_BAD_SCHEME_DATA_POINTER"),
            std::make_pair(0x8004CD04, "DRM_E_DEPRECATED_SECURE_TRACE_BAD_PER_THREAD_AES_DATA_POINTER"),
            std::make_pair(0x8004CD05, "DRM_E_DEPRECATED_SECURE_TRACE_BAD_PER_THREAD_AES_BUFFER_POINTER"),
            std::make_pair(0x8004CD06, "DRM_E_DEPRECATED_SECURE_TRACE_AES_INSUFFICIENT_BUFFER"),
            std::make_pair(0x8004CD07, "DRM_E_DEPRECATED_SECURE_TRACE_VERSION_MISMATCH"),
            std::make_pair(0x8004CD08, "DRM_E_DEPRECATED_SECURE_TRACE_UNEXPECTED_ERROR"),
            std::make_pair(0x8004CF05, "DRM_E_DEPRECATED_ASF_AES_PAYLOAD_FOUND"),
            std::make_pair(0x8004D100, "DRM_E_DEPRECATED_LICGEN_POLICY_NOT_SUPPORTED"),
            std::make_pair(0x8004D303, "DRM_E_DEPRECATED_MOVE_TXID_MISMATCH"),
            std::make_pair(0x8004D500, "DRM_E_DEPRECATED_KEYFILE_INVALID_PLATFORM"),
            std::make_pair(0x8004D501, "DRM_E_DEPRECATED_KEYFILE_TOO_LARGE"),
            std::make_pair(0x8004D502, "DRM_E_DEPRECATED_KEYFILE_PRIVATE_KEY_NOT_FOUND"),
            std::make_pair(0x8004D503, "DRM_E_DEPRECATED_KEYFILE_CERTIFICATE_CHAIN_NOT_FOUND"),
            std::make_pair(0x8004D504, "DRM_E_DEPRECATED_KEYFILE_KEY_NOT_FOUND"),
            std::make_pair(0x8004D505, "DRM_E_DEPRECATED_KEYFILE_UNKNOWN_DECRYPTION_METHOD"),
            std::make_pair(0x8004D506, "DRM_E_DEPRECATED_KEYFILE_INVALID_SIGNATURE"),
            std::make_pair(0x8004D507, "DRM_E_DEPRECATED_KEYFILE_INTERNAL_DECRYPTION_BUFFER_TOO_SMALL"),
            std::make_pair(0x8004D508, "DRM_E_DEPRECATED_KEYFILE_PLATFORMID_MISMATCH"),
            std::make_pair(0x8004D509, "DRM_E_DEPRECATED_KEYFILE_CERTIFICATE_ISSUER_KEY_MISMATCH"),
            std::make_pair(0x8004D50A, "DRM_E_DEPRECATED_KEYFILE_ROBUSTNESSVERSION_MISMATCH"),
            std::make_pair(0x8004D50B, "DRM_E_DEPRECATED_KEYFILE_FILE_NOT_CLOSED"),
            std::make_pair(0x8004D50C, "DRM_E_DEPRECATED_KEYFILE_NOT_INITED"),
            std::make_pair(0x8004D50D, "DRM_E_DEPRECATED_KEYFILE_FORMAT_INVALID"),
            std::make_pair(0x8004D50E, "DRM_E_DEPRECATED_KEYFILE_UPDATE_NOT_ALLOWED"),
            std::make_pair(0x8004D780, "DRM_E_DEPRECATED_OEMHAL_NOT_INITIALIZED"),
            std::make_pair(0x8004D781, "DRM_E_DEPRECATED_OEMHAL_OUT_OF_KEY_REGISTERS"),
            std::make_pair(0x8004D782, "DRM_E_DEPRECATED_OEMHAL_KEYS_IN_USE"),
            std::make_pair(0x8004D783, "DRM_E_DEPRECATED_OEMHAL_NO_KEY"),
            std::make_pair(0x8004D784, "DRM_E_DEPRECATED_OEMHAL_UNSUPPORTED_KEY_TYPE"),
            std::make_pair(0x8004D785, "DRM_E_DEPRECATED_OEMHAL_UNSUPPORTED_KEY_WRAPPING_FORMAT"),
            std::make_pair(0x8004D786, "DRM_E_DEPRECATED_OEMHAL_UNSUPPORTED_KEY_LENGTH"),
            std::make_pair(0x8004D787, "DRM_E_DEPRECATED_OEMHAL_UNSUPPORTED_HASH_TYPE"),
            std::make_pair(0x8004D788, "DRM_E_DEPRECATED_OEMHAL_UNSUPPORTED_SIGNATURE_SCHEME"),
            std::make_pair(0x8004D789, "DRM_E_DEPRECATED_OEMHAL_BUFFER_TOO_LARGE"),
            std::make_pair(0x8004D78A, "DRM_E_DEPRECATED_OEMHAL_SAMPLE_ENCRYPTION_MODE_NOT_PERMITTED"),
        };
        MapType myMap(mapData, mapData + sizeof mapData / sizeof mapData[0]);
        resMap.swap(myMap);
    }
    MapType::const_iterator it = resMap.find(drmResult);
    const std::string errStr = (it != resMap.end()) ? it->second : "unknown DRM error";
    return "(" + errStr + ")";
#else
    NRDP_UNUSED(drmResult);
    return "";
#endif
}
